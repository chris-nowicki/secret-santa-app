// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model profiles {
  id         String       @id @db.Uuid
  email      String       @unique
  firstName  String?
  lastName   String?
  avatar     String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  role       role         @default(USER)
  userStatus userStatus[]
  santa      pairings[]   @relation("SecretSanta")
  person     pairings[]   @relation("SantasPerson")
  fromUser   thankYou[]   @relation("FromUser")
  toUser     thankYou[]   @relation("ToUser")
  wishList   wishList[]

  @@schema("public")
}

enum role {
  USER
  ADMIN

  @@schema("public")
}

model userStatus {
  id      Int          @id @default(autoincrement())
  eventId String
  event   event        @relation(fields: [eventId], references: [id])
  userId  String       @db.Uuid
  user    profiles     @relation(fields: [userId], references: [id])
  status  inviteStatus @default(INVITED)

  @@schema("public")
}

enum inviteStatus {
  INVITED
  DECLINED
  ACCEPTED

  @@schema("public")
}

model event {
  id           String       @id @default(uuid())
  name         String
  date         DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sendReminder Boolean
  userStatus   userStatus[]
  pairings     pairings[]
  thankYou     thankYou[]
  wishList     wishList[]

  @@schema("public")
}

model pairings {
  id        Int      @id @default(autoincrement())
  eventId   String
  event     event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  santaId   String   @db.Uuid
  santa     profiles @relation("SecretSanta", fields: [santaId], references: [id])
  personId  String   @db.Uuid
  person    profiles @relation("SantasPerson", fields: [personId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model thankYou {
  id        Int      @id @default(autoincrement())
  eventId   String
  event     event    @relation(fields: [eventId], references: [id])
  userId    String   @db.Uuid
  user      profiles @relation("FromUser", fields: [userId], references: [id])
  toUserId  String   @db.Uuid
  toUser    profiles @relation("ToUser", fields: [toUserId], references: [id])
  message   String
  createdAt DateTime @default(now())

  @@schema("public")
}

model wishList {
  id              Int      @id @default(autoincrement())
  name            String
  url             String
  userId          String   @db.Uuid
  user            profiles @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Int
  eventId         String
  event           event    @relation(fields: [eventId], references: [id])
  siteImage       String
  siteTitle       String
  siteDescription String

  @@schema("public")
}
